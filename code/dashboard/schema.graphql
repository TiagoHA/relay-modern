input AddToOrderOnCustomerOrderInput {
  customerCustomerId: ID!
  ordersOrderId: ID!
  clientMutationId: String!
}

type AddToOrderOnCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  ordersOrder: Order
  customerCustomer: Customer
  ordersOrderEdge: OrderEdge
  customerCustomerEdge: CustomerEdge
}

type AddToProductOnOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  productsProduct: Product
  ordersOrder: Order
  productsProductEdge: ProductEdge
  ordersOrderEdge: OrderEdge
}

input AddToProductOnOrderProductInput {
  ordersOrderId: ID!
  productsProductId: ID!
  clientMutationId: String!
}

input CreateCustomer {
  name: String!
  ordersIds: [ID!]
  orders: [CustomerordersOrder!]
}

input CreateCustomerInput {
  name: String!
  ordersIds: [ID!]
  orders: [CustomerordersOrder!]
  clientMutationId: String!
}

type CreateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreateOrder {
  customerId: ID
  customer: OrdercustomerCustomer
  productsIds: [ID!]
  products: [OrderproductsProduct!]
}

input CreateOrderInput {
  customerId: ID
  customer: OrdercustomerCustomer
  productsIds: [ID!]
  products: [OrderproductsProduct!]
  clientMutationId: String!
}

type CreateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  customer: Customer
}

input CreateProduct {
  description: String
  imageUrl: String
  name: String!
  ordersIds: [ID!]
  orders: [ProductordersOrder!]
}

input CreateProductInput {
  description: String
  imageUrl: String
  name: String!
  ordersIds: [ID!]
  orders: [ProductordersOrder!]
  clientMutationId: String!
}

type CreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

type Customer implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  orders(filter: OrderFilter, orderBy: OrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type CustomerConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CustomerEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type CustomerEdge {
  # The item at the end of the edge.
  node: Customer!

  # A cursor for use in pagination.
  cursor: String!
}

input CustomerFilter {
  # Logical AND on all given filters.
  AND: [CustomerFilter!]

  # Logical OR on all given filters.
  OR: [CustomerFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  orders_every: OrderFilter
  orders_some: OrderFilter
  orders_none: OrderFilter
}

enum CustomerOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CustomerordersOrder {
  productsIds: [ID!]
  products: [OrderproductsProduct!]
}

scalar DateTime

input DeleteCustomerInput {
  id: ID!
  clientMutationId: String!
}

type DeleteCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeleteOrderInput {
  id: ID!
  clientMutationId: String!
}

type DeleteOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  customer: Customer
  deletedId: ID
}

input DeleteProductInput {
  id: ID!
  clientMutationId: String!
}

type DeleteProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload
  createProduct(input: CreateProductInput!): CreateProductPayload
  updateCustomer(input: UpdateCustomerInput!): UpdateCustomerPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateCustomer(input: UpdateOrCreateCustomerInput!): UpdateOrCreateCustomerPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateOrder(input: UpdateOrCreateOrderInput!): UpdateOrCreateOrderPayload
  updateOrCreateProduct(input: UpdateOrCreateProductInput!): UpdateOrCreateProductPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteCustomer(input: DeleteCustomerInput!): DeleteCustomerPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteOrder(input: DeleteOrderInput!): DeleteOrderPayload
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToOrderOnCustomer(input: AddToOrderOnCustomerOrderInput!): AddToOrderOnCustomerPayload
  addToProductOnOrder(input: AddToProductOnOrderProductInput!): AddToProductOnOrderPayload
  removeFromOrderOnCustomer(input: RemoveFromOrderOnCustomerOrderInput!): RemoveFromOrderOnCustomerPayload
  removeFromProductOnOrder(input: RemoveFromProductOnOrderProductInput!): RemoveFromProductOnOrderPayload
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Order implements Node {
  createdAt: DateTime!
  customer(filter: CustomerFilter): Customer
  id: ID!
  products(filter: ProductFilter, orderBy: ProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type OrderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input OrdercustomerCustomer {
  name: String!
  ordersIds: [ID!]
  orders: [CustomerordersOrder!]
}

# An edge in a connection.
type OrderEdge {
  # The item at the end of the edge.
  node: Order!

  # A cursor for use in pagination.
  cursor: String!
}

input OrderFilter {
  # Logical AND on all given filters.
  AND: [OrderFilter!]

  # Logical OR on all given filters.
  OR: [OrderFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  customer: CustomerFilter
  products_every: ProductFilter
  products_some: ProductFilter
  products_none: ProductFilter
}

enum OrderOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderproductsProduct {
  description: String
  imageUrl: String
  name: String!
  ordersIds: [ID!]
  orders: [ProductordersOrder!]
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Product implements Node {
  createdAt: DateTime!
  description: String
  id: ID!
  imageUrl: String
  name: String!
  orders(filter: OrderFilter, orderBy: OrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge.
  node: Product!

  # A cursor for use in pagination.
  cursor: String!
}

input ProductFilter {
  # Logical AND on all given filters.
  AND: [ProductFilter!]

  # Logical OR on all given filters.
  OR: [ProductFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  imageUrl: String

  # All values that are not equal to given value.
  imageUrl_not: String

  # All values that are contained in given list.
  imageUrl_in: [String!]

  # All values that are not contained in given list.
  imageUrl_not_in: [String!]

  # All values less than the given value.
  imageUrl_lt: String

  # All values less than or equal the given value.
  imageUrl_lte: String

  # All values greater than the given value.
  imageUrl_gt: String

  # All values greater than or equal the given value.
  imageUrl_gte: String

  # All values containing the given string.
  imageUrl_contains: String

  # All values not containing the given string.
  imageUrl_not_contains: String

  # All values starting with the given string.
  imageUrl_starts_with: String

  # All values not starting with the given string.
  imageUrl_not_starts_with: String

  # All values ending with the given string.
  imageUrl_ends_with: String

  # All values not ending with the given string.
  imageUrl_not_ends_with: String
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  orders_every: OrderFilter
  orders_some: OrderFilter
  orders_none: OrderFilter
}

enum ProductOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProductordersOrder {
  customerId: ID
  customer: OrdercustomerCustomer
  productsIds: [ID!]
  products: [OrderproductsProduct!]
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromOrderOnCustomerOrderInput {
  customerCustomerId: ID!
  ordersOrderId: ID!
  clientMutationId: String!
}

type RemoveFromOrderOnCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  ordersOrder: Order
  customerCustomer: Customer
  ordersOrderEdge: OrderEdge
  customerCustomerEdge: CustomerEdge
}

type RemoveFromProductOnOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  productsProduct: Product
  ordersOrder: Order
  productsProductEdge: ProductEdge
  ordersOrderEdge: OrderEdge
}

input RemoveFromProductOnOrderProductInput {
  ordersOrderId: ID!
  productsProductId: ID!
  clientMutationId: String!
}

input SignupUserInput {
  clientMutationId: String!
}

input UpdateCustomer {
  id: ID!
  name: String
  ordersIds: [ID!]
  orders: [CustomerordersOrder!]
}

input UpdateCustomerInput {
  id: ID!
  name: String
  ordersIds: [ID!]
  orders: [CustomerordersOrder!]
  clientMutationId: String!
}

type UpdateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateCustomerInput {
  update: UpdateCustomer!
  create: CreateCustomer!
  clientMutationId: String!
}

type UpdateOrCreateCustomerPayload {
  viewer: Viewer!
  clientMutationId: String!
  customer: Customer
  edge: CustomerEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateOrderInput {
  update: UpdateOrder!
  create: CreateOrder!
  clientMutationId: String!
}

type UpdateOrCreateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  customer: Customer
}

input UpdateOrCreateProductInput {
  update: UpdateProduct!
  create: CreateProduct!
  clientMutationId: String!
}

type UpdateOrCreateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdateOrder {
  id: ID!
  customerId: ID
  customer: OrdercustomerCustomer
  productsIds: [ID!]
  products: [OrderproductsProduct!]
}

input UpdateOrderInput {
  id: ID!
  customerId: ID
  customer: OrdercustomerCustomer
  productsIds: [ID!]
  products: [OrderproductsProduct!]
  clientMutationId: String!
}

type UpdateOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  order: Order
  edge: OrderEdge
  customer: Customer
}

input UpdateProduct {
  description: String
  id: ID!
  imageUrl: String
  name: String
  ordersIds: [ID!]
  orders: [ProductordersOrder!]
}

input UpdateProductInput {
  description: String
  id: ID!
  imageUrl: String
  name: String
  ordersIds: [ID!]
  orders: [ProductordersOrder!]
  clientMutationId: String!
}

type UpdateProductPayload {
  viewer: Viewer!
  clientMutationId: String!
  product: Product
  edge: ProductEdge
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allCustomers(filter: CustomerFilter, orderBy: CustomerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allOrders(filter: OrderFilter, orderBy: OrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  allProducts(filter: ProductFilter, orderBy: ProductOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Customer(id: ID): Customer
  File(id: ID, secret: String, url: String): File
  Order(id: ID): Order
  Product(id: ID): Product
  User(id: ID): User
  id: ID!
}
